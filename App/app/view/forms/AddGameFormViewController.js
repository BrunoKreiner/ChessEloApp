/*
 * File: app/view/forms/AddGameFormViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Enif.view.forms.AddGameFormViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.forms.addgameform',

    isInGames: function(timeStamp, store) {
        return store.getData().items.some(item => {return item.get('timestamp') === timeStamp; });

    },

    /* This is not very nice function - spaghetti code */
    addNewGame: function() {
        const form = this.getView();
        // validation doens't work - crash?
        //if (form.isValid()){
        if (true){

            Ext.getStore('GameRawData').load({
                callback: function (records, operation, success) {
                    if(success){
                        //TODO: FIX this - dirty hacks
                        function isInGames (timeStamp, store) {
                            return store.getData().items.some(item => {return item.get('timestamp') === timeStamp; });
                        }


                        const store = Ext.getStore("GameRawData"),
                              values = form.getValues ();

                        // remove any filters from the store
                        store.clearFilter();

                        // I should be using references in here
                        const wonBtn = form.query('segmentedbutton[name=playerWon]')[0];
                        values.result = wonBtn.getValue();

                        const timeoutBtn = form.query('segmentedbutton[name=time]')[0];
                        values.timeout = (timeoutBtn.getValue() == 'true');

                        // Because we are allowing adding games to the history / future we need to correctly select the timestamp for the new record
                        // We get only a date and look into the old records and finds the empty timestamp slot

                        // Get the actual timestamp
                        let selectedDate = Ext.Date.format(new Date(values.timestamp), 'Y,m,d'),
                            nwTimestamp = new Date(selectedDate).getTime(); // get the timestamp without time

                        // Search the games for new timestamp
                        while(isInGames(nwTimestamp, store)){
                            nwTimestamp++;
                        }

                        values.timestamp = nwTimestamp;
                        //console.log("New TimeStamp is:" + values.timestamp);

                        //TODO: Proper verification of the form
                        if (values.playerWhite == null || values.playerBlack == null ){
                            Ext.toast('Invalid form!', 3000);
                            form.reset();
                            return;
                        }

                        let newRecord = store.add(values);

                        //reset form
                        timeoutBtn.setValue('false');
                        form.query('button[name=playerWhite]')[0].setText('White');
                        form.query('button[name=playerBlack]')[0].setText('Black');


                        store.sync({
                            callback: function (records, operation, success) {
                                Enif.app.getController('storeLoadController').reloadAllStores();
                            },
                            success: function (batch, options) {
                                Ext.toast('Record sucesfully aded', 3000);
                                // clear filters after sync / some kind of bug?
                                store.clearFilter();
                            },
                            failure: function (batch, options) {
                                Ext.toast('Error while adding the record', 3000);
                            }
                        });


                    } else {
                        const errMsg = 'Error loading the data before push';
                        console.error(errMsg);
                        Ext.toast(errMsg, 55000);
                    }
                }
            });






        }else{
           Ext.Msg.alert('Error', 'The form is invalid!', Ext.emptyFn);
        }
    }

});