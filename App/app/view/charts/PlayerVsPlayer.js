/*
 * File: app/view/charts/PlayerVsPlayer.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Enif.view.charts.PlayerVsPlayer', {
    extend: 'Ext.Panel',
    alias: 'widget.charts.playervsplayer',

    requires: [
        'Enif.view.charts.PlayerVsPlayerViewModel',
        'Enif.view.charts.PlayerVsPlayerViewController',
        'Enif.view.grids.GameGrid',
        'Ext.field.Select',
        'Ext.Button',
        'Ext.field.Checkbox',
        'Ext.field.Number',
        'Ext.Label',
        'Ext.chart.CartesianChart',
        'Ext.chart.axis.Category',
        'Ext.chart.axis.Numeric',
        'Ext.chart.series.Line',
        'Ext.Panel',
        'Ext.grid.Grid',
        'Ext.panel.Collapser'
    ],

    controller: 'charts.playervsplayer',
    viewModel: {
        type: 'charts.playervsplayer'
    },
    title: 'Player vs Player score',

    items: [
        {
            xtype: 'container',
            padding: 10,
            layout: {
                type: 'hbox',
                pack: 'center'
            },
            items: [
                {
                    xtype: 'selectfield',
                    flex: 8,
                    reference: 'firstPlayerCombo',
                    itemId: 'mycombobox',
                    name: 'topPlayer',
                    width: '',
                    maxWidth: 385,
                    modelValidation: true,
                    label: 'Player ',
                    labelWidth: 80,
                    editable: false,
                    placeholder: '<Select Player>',
                    displayField: 'name',
                    store: 'PlayerData',
                    valueField: 'uid'
                },
                {
                    xtype: 'selectfield',
                    queryMode: 'local',
                    flex: 8,
                    reference: 'secondPlayerCombo',
                    itemId: 'mycombobox1',
                    name: 'bottomPlayer',
                    margin: '0 10 0 20',
                    maxWidth: 385,
                    modelValidation: true,
                    label: 'vs Player',
                    labelWidth: 80,
                    editable: false,
                    placeholder: '<Select Player>',
                    displayField: 'name',
                    store: 'PlayerData',
                    valueField: 'uid'
                },
                {
                    xtype: 'button',
                    margin: '0 5 0 5',
                    text: 'LOAD',
                    listeners: {
                        tap: 'onLoadButtonTap'
                    }
                },
                {
                    xtype: 'checkbox',
                    reference: 'animateCheckbox',
                    width: 100,
                    margin: '0 5 0 10',
                    label: 'Animate',
                    labelWidth: 70
                },
                {
                    xtype: 'numberfield',
                    reference: 'delayMs',
                    width: 210,
                    label: 'delay (ms)',
                    labelWidth: 80,
                    value: 500,
                    maxValue: 10000,
                    minValue: 10,
                    stepValue: 250
                }
            ]
        },
        {
            xtype: 'label',
            height: 70,
            bind: {
                html: '{getScoreLabel}'
            }
        },
        {
            xtype: 'container',
            height: '100%',
            layout: 'hbox',
            items: [
                {
                    xtype: 'cartesian',
                    flex: 3,
                    height: '85%',
                    width: '100%',
                    docked: 'left',
                    colors: [
                        '#115fa6',
                        '#94ae0a',
                        '#a61120',
                        '#ff8809',
                        '#ffd13e',
                        '#a61187',
                        '#24ad9a',
                        '#7c7474',
                        '#a66111'
                    ],
                    innerPadding: {
                        top: 15,
                        left: 15,
                        right: 15,
                        bottom: 15
                    },
                    bind: {
                        store: '{playedGamesScore}'
                    },
                    axes: [
                        {
                            type: 'category',
                            renderer: function(axis, label, layoutContext, lastLabel) {
                                return Ext.Date.format(new Date(label), 'd.m.y');
                            },
                            fields: [
                                'time'
                            ]
                        },
                        {
                            type: 'numeric',
                            fields: [
                                'data',
                                'zeroData'
                            ],
                            grid: {
                                odd: {
                                    fill: '#e8e8e8'
                                }
                            },
                            id: 'numeric-axis',
                            position: 'right'
                        },
                        {
                            type: 'numeric',
                            grid: {
                                odd: {
                                    fill: '#e8e8e8'
                                }
                            },
                            linkedTo: 'numeric-axis',
                            position: 'left'
                        }
                    ],
                    series: [
                        {
                            type: 'line',
                            colors: [
                                'rgb(57, 114, 176)'
                            ],
                            marker: {
                                type: 'circle',
                                radius: 3
                            },
                            style: {
                                smooth: true,
                                stroke: 'rgb(57, 114, 176)',
                                lineWidth: 3
                            },
                            tooltip: {
                                trackMouse: true,
                                showDelay: 2,
                                hideDelay: 0,
                                width: 220,
                                height: 90,
                                renderer: 'tooltipRenderer'
                            },
                            xField: 'time',
                            yField: 'data'
                        },
                        {
                            type: 'line',
                            colors: [
                                'rgba(0,0,0)'
                            ],
                            style: {
                                smooth: false,
                                stroke: '#000'
                            },
                            xField: 'time',
                            yField: 'zeroData'
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'panel',
            width: 800,
            docked: 'right',
            collapsed: true,
            collapsible: 'right',
            bind: {
                title: '{getNumberOfMatches}'
            },
            items: [
                {
                    xtype: 'grids.gamegrid',
                    items: null,
                    reference: 'gridWithMatches',
                    bind: {
                        store: '{playedGames}'
                    }
                }
            ],
            listeners: {
                expand: 'onGridPanelExpand',
                drawershow: 'onGridPanelDrawershow'
            }
        }
    ]

});