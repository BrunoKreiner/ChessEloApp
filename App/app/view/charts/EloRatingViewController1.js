/*
 * File: app/view/charts/EloRatingViewController1.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Enif.view.charts.EloRatingViewController1', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.charts.eloratingnavigator',

    getColor: function(index) {
        index = index ? index : 0;
        let colors = ["#115fa6", "#94ae0a", "#a61120", "#ff8809", "#ffd13e", "#a61187", "#24ad9a", "#7c7474", "#a66111"];

        if(index >= colors.length){
            index -= colors.length;
        }
        return colors[index];


    },

    init: function(view) {
         if (!Ext.supports.Touch) {
                    /**
                     * Touch devices do not need the toggle buttons
                     * as the panzoom interaction can determine which
                     * interaction to use based on how many touches.
                     * 1 touch point is a pan, 2 touch points is a zoom.
                     */
                    var chart = view.lookup('chart'),
                        toolbar = view.lookup('toolbar'),
                        interaction = chart.getInteraction('panzoom'),
                        button = interaction.getModeToggleButton();

                    toolbar.add(button);
                }
    },

    toggleInteractions: function() {
        let chart = this.lookupReference('chart'),
            interactionCrossZoom = chart && Ext.ComponentQuery.query('interaction[type=crosszoom]', chart)[0],
            interactionPanZoom = chart && Ext.ComponentQuery.query('interaction[type=panzoom]', chart)[0],
            interactionCrossZoomEnabled = interactionCrossZoom.getEnabled(),
            interactionPanZoomEnabled = interactionPanZoom.getEnabled(),
            resetCrossZoomBtn = this.lookupReference('resetCrossZoom'),
            togglePanZoomBtn = this.lookupReference('panZoomToggle');


            if(interactionCrossZoomEnabled){
                // enable pan zoom
                interactionPanZoom.setEnabled(true);
                interactionCrossZoom.setEnabled(false);
                resetCrossZoomBtn.setDisabled(true);
                togglePanZoomBtn.setDisabled(false);
            }else{
                // enable cross zoom
                interactionPanZoom.setEnabled(false);
                interactionCrossZoom.setEnabled(true);
                resetCrossZoomBtn.setDisabled(false);
                togglePanZoomBtn.setDisabled(true);
            }


    },

    onEnableCrossZoomButtonTap: function(button, e, eOpts) {
        this.toggleInteractions();
    },

    onEnablePanZoomButtonTap: function(button, e, eOpts) {
        this.toggleInteractions();
    },

    onZoomResetButtonTap: function(button, e, eOpts) {

        let chart = this.lookupReference('chart'),
        interaction = chart && Ext.ComponentQuery.query('interaction[type=crosszoom]', chart)[0],
        undoButton = interaction && interaction.getUndoButton(),
        handler = undoButton && undoButton.config.handler;
        if (handler) {
            handler();
        }
    },

    onContainerInitialize: function(component, eOpts) {
        component = this.lookupReference('chart');

        let playerData = Ext.getStore("PlayerData").getData();
        noPlayers = playerData.length;

        for(let i= 0; i< noPlayers; i++){
            let cl = this.getColor(i);
            component.addSeries({
                type: 'line',
                colors: [
                cl
                ],
                smooth: true,
                style: {
                    stroke: cl,
                    lineWidth: 3
                },
                marker: {
                    type: 'circle',
                    radius: 1
                },
                xField: 'timestamp',
                yField: 'player'+ i +'Rating',
                title: playerData.getAt(i).get('name'),
                tooltip: {
                    trackMouse: true,
                    width: 100,
                    height: 28,
                    renderer: function (toolTip, record, ctx) {
                        toolTip.setHtml(record.get('player' + ctx.field.replace(/[^0-9]/g,'') + 'Name') + ': ' + Math.round(record.get(ctx.field)));
                    }
                }
            });
        }


    }

});