/*
 * File: app/view/grids/GameGrid.js
 *
 * This file was generated by Sencha Architect version 4.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Enif.view.grids.GameGrid', {
    extend: 'Ext.grid.Grid',
    alias: 'widget.grids.gamegrid',

    requires: [
        'Enif.store.GameRawData',
        'Enif.view.grids.GameGridViewController',
        'Enif.view.grids.GameGridViewModel',
        'Ext.grid.column.Number',
        'Ext.grid.column.RowNumberer',
        'Ext.grid.plugin.CellEditing',
        'Ext.grid.plugin.RowOperations'
    ],

    controller: 'grids.gamegrid',
    viewModel: {
        type: 'grids.gamegrid'
    },
    height: '100%',
    name: 'grids.GameGrid',
    width: '100%',
    maxWidth: 1000,
    selectable: {
        mode: 'single',
        checkbox: true
    },
    store: 'GameRawData',

    columns: [
        {
            xtype: 'rownumberer',
            width: 50
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, record, dataIndex, cell, column) {
                return Ext.Date.format(new Date(value), 'd.m.Y');
            },
            align: 'center',
            dataIndex: 'timestamp',
            text: 'Timestamp'
        },
        {
            xtype: 'numbercolumn',
            width: 158,
            align: 'center',
            dataIndex: 'playerWhiteRating',
            text: 'Player White Rating',
            format: '0'
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, record, dataIndex, cell, column) {

                cell.setCls('white_cell');
                return this.up('grid').getController().getUserName(value);

            },
            align: 'center',
            dataIndex: 'playerWhite',
            text: 'Player White'
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, record, dataIndex, cell, column) {
                cell.setCls('black_cell');
                return this.up('grid').getController().getUserName(value);
            },
            align: 'center',
            dataIndex: 'playerBlack',
            text: 'Player Black'
        },
        {
            xtype: 'numbercolumn',
            width: 145,
            align: 'center',
            dataIndex: 'playerBlackRating',
            text: 'Player Black Rating',
            format: '0'
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, record, dataIndex, cell, column) {
                let name = value;

                if(value == "white"){
                    name = this.up('grid').getController().getUserName(record.getData().playerWhite);
                    cell.setCls('white_cell');
                }else if (value == "black") {
                    name = this.up('grid').getController().getUserName(record.getData().playerBlack);
                    cell.setCls('black_cell');
                }else if (value == 'draw'){
                    name = "draw";
                }

                return name;
            },
            align: 'center',
            dataIndex: 'result',
            text: 'Won'
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, record, dataIndex, cell, column) {
                if (value === false){
                    return "No";
                }else{
                    return "Yes";
                }
            },
            align: 'center',
            dataIndex: 'timeout',
            text: 'Timeout'
        }
    ],
    plugins: [
        {
            type: 'rowoperations'
        },
        {
            type: 'gridcellediting'
        }
    ]

});