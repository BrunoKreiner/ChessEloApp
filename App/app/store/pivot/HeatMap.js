/*
 * File: app/store/pivot/HeatMap.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

/*
    The data are FAKE to just show something in the design view
*/
Ext.define('Enif.store.pivot.HeatMap', {
    extend: 'Ext.data.Store',

    requires: [
        'Ext.data.field.Number'
    ],

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({
            storeId: 'pivot.HeatMap',
            data: [
                {
                    player1: 'qui',
                    player2: 'enim',
                    dataField: 320.38
                },
                {
                    player1: 'soluta',
                    player2: 'at',
                    dataField: 600.82
                },
                {
                    player1: 'nulla',
                    player2: 'repudiandae',
                    dataField: 465.59
                },
                {
                    player1: 'non',
                    player2: 'totam',
                    dataField: 248.48
                },
                {
                    player1: 'unde',
                    player2: 'enim',
                    dataField: 649.91
                },
                {
                    player1: 'doloribus',
                    player2: 'odit',
                    dataField: 375.15
                },
                {
                    player1: 'velit',
                    player2: 'voluptates',
                    dataField: 924.28
                },
                {
                    player1: 'tempore',
                    player2: 'labore',
                    dataField: 25.02
                },
                {
                    player1: 'nihil',
                    player2: 'qui',
                    dataField: 37.44
                },
                {
                    player1: 'doloribus',
                    player2: 'laudantium',
                    dataField: 310.21
                }
            ],
            fields: [
                {
                    name: 'player1'
                },
                {
                    name: 'player2'
                },
                {
                    type: 'float',
                    name: 'dataField'
                },
                {
                    type: 'int',
                    name: 'wins'
                },
                {
                    type: 'int',
                    name: 'loses'
                },
                {
                    type: 'int',
                    name: 'draws'
                },
                {
                    type: 'int',
                    name: 'numberOfGames'
                },
                {
                    type: 'float',
                    name: 'winRate'
                },
                {
                    type: 'float',
                    name: 'loseRate'
                }
            ],
            listeners: {
                load: {
                    fn: me.onStoreLoad
                }
            }
        }, cfg)]);
    },

    onStoreLoad: function(store, records, successful, operation, eOpts) {
        const playerData = Ext.getStore('SortedPlayerData').getData();
        if (!playerData) return;

        const gameStore = Ext.getStore('GameRawData');
        gameStore.clearFilter();


        let thisStoreData = [];

        /************** calculate the data *****************/

        for(let i = 0; i < playerData.getCount(); i++){
            const playerId = playerData.getAt(i).get('uid');
            const playerName = playerData.getAt(i).get('name');

            for(let k = playerData.getCount() - 1 ; k >= 0; k--){
                const playerId2 = playerData.getAt(k).get('uid');
                const playerName2 = playerData.getAt(k).get('name');
                // skip the same player
                if(playerId == playerId2) continue;


                let wins = 0,
                    draws = 0,
                    loses = 0;

                gameStore.getData().items.forEach(rec => {  // jshint ignore:line
                    if ((rec.get('playerWhite') === playerId &&
                        rec.get('playerBlack') === playerId2 &&
                        rec.get('result') === 'white') ||
                       (rec.get('playerBlack') === playerId &&
                        rec.get('playerWhite') === playerId2 &&
                        rec.get('result') === 'black')) {
                        wins++;
                    } else if((rec.get('playerWhite') === playerId &&
                        rec.get('playerBlack') === playerId2 &&
                        rec.get('result') === 'black') ||
                       (rec.get('playerBlack') === playerId &&
                        rec.get('playerWhite') === playerId2 &&
                        rec.get('result') === 'white')) {
                        loses++;
                    } else if((rec.get('playerWhite') === playerId &&
                        rec.get('playerBlack') === playerId2 &&
                        rec.get('result') === 'draw') ||
                       (rec.get('playerBlack') === playerId &&
                        rec.get('playerWhite') === playerId2 &&
                        rec.get('result') === 'draw')) {
                        draws++;
                    }
                });

                const numberOfGames = wins + draws + loses;
                let winRate = ((wins / numberOfGames)*100).toFixed(0);
                let loseRate = ((loses / numberOfGames)*100).toFixed(0);

                if(numberOfGames === 0 ){
                    winRate = -1;
                    loseRate = 1;
                }

                thisStoreData.push({
                    player1: playerName,
                    player2: playerName2,
                    dataField: winRate,
                    winRate: winRate,
                    loseRate: loseRate,
                    wins: wins,
                    draws: draws,
                    loses: loses,
                    numberOfGames: numberOfGames
                });
            }
        }

        // Set the data (reverse to get better players on TOP)
        store.setData(thisStoreData.reverse());
    },

    /* The heatMap can't use data binding, we need to change the data in the store for this */
    changeDataField: function(field) {
        const data = this.getData();
        for(let i = 0; i < data.length; i++){
            const record = data.getAt(i);
            record.set('dataField', record.get(field));
        }
    }

});